<?php
use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;

/**
 * Extracts SVG symbols from a collection of SVG files
 *
 * @param array $icons
 *   An array of arrays of icons names, keyed by the file name
 *   without the .svg extension.
 * 
 * @return string
 *   an <svg> element containing <symbol> elements
 */
function alkaline_get_svg_icons(array $icons) {
  $selected_nodes = [];
  
  // load the selected icons into an array
  foreach ($icons as $set => $selected_ids) {
    $svgDoc = new DOMDocument();
    $svgDoc->load(drupal_get_path('theme', 'alkaline') . "/icons/$set.svg");
    
    foreach ($svgDoc->getElementsByTagName('symbol') as $node) {
      $id = $node->getAttribute('id');
      if (in_array($id, $selected_ids)) {
        $selected_nodes[] = $node->cloneNode(true);
      }
    }
  }

  // initialise a blank DOM
  $htmlDoc = new DOMDocument();

  // build the root element
  $body = $htmlDoc->createElement('body');
  $htmlDoc->appendChild($body);

  // build the svg element
  $svg = $htmlDoc->createElement('svg');
  $svg->setAttribute('xmlns', 'http://www.w3.org/2000/svg');
  $svg->setAttribute('style', 'display: none;');
  $body->appendChild($svg);

  // clone the nodes and add them to the new SVG element
  foreach ($selected_nodes as $node) {
    $importedNode = $htmlDoc->importNode($node, true);
    $svg->appendChild($importedNode);
  }

  // render the SVG element
  $html = Html::serialize($htmlDoc);
  return $html;
}


/**
 * Generates SVG icon render array.
 */
function alkaline_icon($name) {
  return [
    '#prefix' => '<svg class="icon">',
    '#markup' => '<use xlink:href="#' . $name . '" />',
    '#suffix' => '</svg>',
  ];
}


/**
 * Implements template_preprocess_block()
 */
function alkaline_preprocess_block(&$vars) {

  if ($vars['base_plugin_id'] == 'block_content') {
    // Get the machine name of the custom block type.
    $connection = \Drupal::service('database');
    $customBlockType = $connection->query("SELECT type FROM block_content WHERE uuid = :uuid", [
      ':uuid' => $vars['derivative_plugin_id'],
    ])->fetchField();

    // Call the block-type-specific preprocessor.
    $blockTypePreprocessor = __FUNCTION__ . '_' . $customBlockType;
    if (function_exists($blockTypePreprocessor)) {
      $blockTypePreprocessor($vars);
    }
  }
}


/**
 * Preprocessor for hero_banner block type
 *
 * @param [type] $vars
 * @return void
 */
function alkaline_preprocess_block_hero_banner(&$vars) {
  // Fetch this theme's breakpoints.
  $breakpoints = \Drupal::service('breakpoint.manager')->getBreakpointsByGroup('alkaline');

  // Fetch the background image URI.
  $uuid = $vars['derivative_plugin_id'];
  $block_content = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $uuid);
  if ($block_content) {
    $uri = $block_content->field_hero_background_image->entity->getFileUri();
  }

  // Prepare an array of CSS media queries and URLs to be 
  // assembled into background-image rules.
  $cssRules = [];
  foreach ($breakpoints as $name => $breakpoint) {
    // Derive the image style name from the breakpoint name.
    $imageStyleName = str_replace('alkaline.', 'alkaline_hero_', $name);
    $imageStyleName = str_replace('alkaline.', 'hero_', $name); // @debug

    // Try to load the image style
    if ($imageStyle = ImageStyle::load($imageStyleName)) {
      // Save the cssRule components
      $cssRules[] = [
        'mediaQuery' => $breakpoint->getMediaQuery(),
        'url' => $imageStyle->buildUrl($uri),
      ];
    }
  }

  // Generate CSS to provide a background-image rule for each
  // of this theme's breakpoints that have a matching image style.
  // Use block's HTML ID as the selector.
  $blockHtmlId = $vars['attributes']['id'];
  $css = '';
  foreach ($cssRules as $rule) {
    $mediaQuery = $rule['mediaQuery'];
    $url = $rule['url'];
    $css .= "@media $mediaQuery { #$blockHtmlId > figure::after { background-image: url('$url'); }}\n";
  }

  // Add style element to vars for template to use.
  $vars['background_css'] = '<style>' . $css . '</style>';
}


/**
 * Implements template_preprocess_commerce_product_variation()
 */
function alkaline_preprocess_commerce_product_variation(&$vars) {
  //kint($vars);
  // // Get the commerce product.
  // $product = $vars['elements']['#commerce_product'];
  // // Pass the price.
  // $vars['price'] = $product->variations->entity->getPrice();
}


/**
 * Implements template_preprocess_field()
 */
function alkaline_preprocess_field(&$vars) {
  // Call the name-specific preprocessor.
  $fieldNamePreprocessor = __FUNCTION__ . '_' . str_replace("field_", "" ,$vars['field_name']);
  if (function_exists($fieldNamePreprocessor)) {
    $fieldNamePreprocessor($vars);
  }
}


/**
 * Preprocessor for field_image
 */
function alkaline_preprocess_field_image(&$vars) {
  // Supply the alt text to the template as the caption.
  foreach ($vars['items'] as &$item) {
    $image = $item['content']['#item']->getValue();
    $item['caption'] = $image['alt'];
  }
}


/**
 * Implements template_preprocess_form()
 */
function alkaline_preprocess_form(&$vars) {

}


/**
 * Implements template_preprocess_html()
 */
function alkaline_preprocess_html(&$vars) {
  $vars['icons'] = alkaline_get_svg_icons([
    'fa-brands' => [
      'facebook-f',
      'twitter',
    ],
    'fa-solid' => [
      'bars',
      'caret-down',
      'caret-left',
      'caret-right',
      'download',
      'fax',
      'map-marker',
      'phone',
      'shopping-cart',
      'times',
      'times-circle', // @todo Remove this icon
    ],
  ]);
}


/**
 * Implements template_preprocess_node()
 */
function alkaline_preprocess_menu(&$vars, $hook) {
  if ($vars['menu_name'] != 'admin') {
    foreach ($vars['items'] as &$item) {
      try {
        $uri = $item['url']->getUri();

        // Add a phone icon if the link has a tel URI.
        if (explode(':', $uri)[0] == 'tel') {
          $item['icon'] = 'phone';
        }
      }
      catch (UnexpectedValueException $ex) {
        $route_name = $item['url']->getRouteName();
      }
    }
  }
}


/**
 * Implements template_preprocess_node()
 */
function alkaline_preprocess_node(&$vars) {
  // Change the submission date format
  $vars['date'] = \Drupal::service('date.formatter')
    ->format($vars['node']->getCreatedTime(), 'custom', 'j M Y');
  
  // Call the type-specific preprocessor.
  $node_type_preprocessor = __FUNCTION__ . '_' . $vars['node']->getType();
  if (function_exists($node_type_preprocessor)) {
    $node_type_preprocessor($vars);
  }
}


/**
 * Preprocessor for article content type
 */
function alkaline_preprocess_node_article(&$vars) {
  if ($vars['view_mode'] == 'full') {
    // Create a header
    $vars['header'] = [];

    // Move some fields to the header section.
    $header_fields = [
      'social_share_buttons',
      'field_lead_section',
      'field_image',
    ];

    foreach ($header_fields as $field_name) {
      $vars['header'][$field_name] = $vars['content'][$field_name];
      unset($vars['content'][$field_name]);
    }
  }
}


/**
 * Preprocessor for article content type
 */
function alkaline_preprocess_node_page(&$vars) {
  if ($vars['page'] && $vars['url'] == '/home') {
    // Remove the social share buttons if enabled
    if(isset($vars['content']['social_share_buttons']))
      unset($vars['content']['social_share_buttons']);
  }
}


/**
 * Implements template_preprocess_page()
 */
function alkaline_preprocess_page(&$vars) {
  $vars['site_name'] = \Drupal::config('system.site')->get('name');
  $vars['current_year'] = date('Y');
}


/**
 * Implements template_preprocess_user()
 */
function alkaline_preprocess_user(&$vars) {
  // dpm(array_keys($vars));
  //dpm($vars['theme_hook_original']);
}


// /**
//  * Implements hook_theme_suggestions_alter()
//  */
// function alkaline_theme_suggestions_alter(&$suggestions, $vars) {
//   // add view mode template suggestion for Users
//   if ($vars['theme_hook_original'] == 'user') {
//     $suggestions[] = 'user__' . $vars['elements']['#view_mode'];
//   }
// }


/**
 * Implements hook_theme_suggestions_block_alter()
 */
function alkaline_theme_suggestions_block_alter(&$suggestions, $vars) {

  // Add template suggestions for custom block types.
  if ($vars['elements']['#base_plugin_id'] == 'block_content') {

    // Get the block type from the database.
    $uuid = $vars['elements']['#derivative_plugin_id'];    
    $block_type = \Drupal::database()
    ->select('block_content','bc')
    ->fields('bc', ['type'])
    ->condition('uuid', $uuid)
    ->execute()
    ->fetchField();

    // Add a template suggestion for the block type.
    $suggestions[] = 'block__' . $block_type;
  }
}


/**
 * Implements hook_theme_suggestions_user_alter()
 */
function alkaline_theme_suggestions_user_alter(&$suggestions, $vars) {
  // add view mode template suggestion
  $suggestions[] = 'user__' . $vars['elements']['#view_mode'];
}

