<?php

use Drupal\block\Entity\Block;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\paragraphs\Entity\Paragraph;


function _alkaline_lead_section(&$vars) {
  $node = $vars['node'];
  if ($node->field_background_image) {
    if ($file = $node->field_background_image->entity) {
      $uri = $file->getFileUri();
      $htmlId = "banner--" . $node->id();
      $vars['banner_id'] = $htmlId;

      // Add style element to vars.
      $vars['css'] = _alkaline_responsive_background_css('hero', "#$htmlId", $uri);
    }
  }
}


function _alkaline_responsive_background_css($imageStyleClass, $selector, $imageUri) {
  // Fetch this theme's breakpoints.
  $breakpoints = \Drupal::service('breakpoint.manager')->getBreakpointsByGroup('alkaline');

  // Prepare an array of CSS media queries and URLs to be
  // assembled into background-image rules.
  $cssRules = [];
  foreach ($breakpoints as $name => $breakpoint) {
    // Derive the image style name from the breakpoint name.
    $imageStyleName = str_replace('alkaline.', '' . $imageStyleClass . '_', $name);

    // Try to load the image style
    if ($imageStyle = ImageStyle::load($imageStyleName)) {
      // Save the cssRule components
      $cssRules[] = [
        'mediaQuery' => $breakpoint->getMediaQuery(),
        'url' => file_url_transform_relative($imageStyle->buildUrl($imageUri)),
      ];
    }
  }

  // Generate CSS to provide a background-image rule for each
  // of this theme's breakpoints that have a matching image style.
  // Use block's HTML ID as the selector.
  $css = '';
  foreach ($cssRules as $rule) {
    $mediaQuery = $rule['mediaQuery'];
    $url = $rule['url'];
    $css .= "@media $mediaQuery { $selector::before, $selector::after { background-image: url('$url'); }}\n";
  }

  return [
    '#type' => 'html_tag',
    '#tag' => 'style',
    '#value' => $css,
  ];
}


/**
 * Extracts SVG symbols from a collection of SVG files
 *
 * @param array $icons
 *   An array of arrays of icons names, keyed by the file name
 *   without the .svg extension.
 *
 * @return string
 *   an <svg> element containing <symbol> elements
 */
function _alkaline_get_svg_icons(array $icons) {
  $selected_nodes = [];

  // load the selected icons into an array
  foreach ($icons as $set => $selected_ids) {
    $svgDoc = new DOMDocument();
    $svgDoc->load(drupal_get_path('theme', 'alkaline') . "/icons/$set.svg");

    foreach ($svgDoc->getElementsByTagName('symbol') as $node) {
      $id = $node->getAttribute('id');
      if (in_array($id, $selected_ids)) {
        $selected_nodes[] = $node->cloneNode(true);
      }
    }
  }

  // initialise a blank DOM
  $htmlDoc = new DOMDocument();

  // build the root element
  $body = $htmlDoc->createElement('body');
  $htmlDoc->appendChild($body);

  // build the svg element
  $svg = $htmlDoc->createElement('svg');
  $svg->setAttribute('xmlns', 'http://www.w3.org/2000/svg');
  $svg->setAttribute('style', 'display: none;');
  $body->appendChild($svg);

  // clone the nodes and add them to the new SVG element
  foreach ($selected_nodes as $node) {
    $importedNode = $htmlDoc->importNode($node, true);
    $svg->appendChild($importedNode);
  }

  // render the SVG element
  $html = Html::serialize($htmlDoc);
  return $html;
}


/**
 * Generates SVG icon render array.
 *
 * @todo Replace with a render plugin
 */
function _alkaline_icon($name) {
  return [
    '#prefix' => '<svg class="icon">',
    '#markup' => '<use xlink:href="#' . $name . '" />',
    '#suffix' => '</svg>',
  ];
}


/**
 * Implements template_preprocess_block()
 */
function alkaline_preprocess_block(&$vars) {

  if ($vars['base_plugin_id'] == 'block_content') {
    // Get the machine name of the custom block type.
    $connection = \Drupal::service('database');
    $custom_block_type = $connection->query("SELECT type FROM block_content WHERE uuid = :uuid", [
      ':uuid' => $vars['derivative_plugin_id'],
    ])->fetchField();

    // Call the block-type-specific preprocessor.
    $block_type_preprocessor = __FUNCTION__ . '_' . $custom_block_type;
    if (function_exists($block_type_preprocessor)) {
      $block_type_preprocessor($vars);
    }
  }

  // If this is a views block and it has a more link
  // then add the link to the block as a button.
  if(isset($vars['content']['#type']) && $vars['content']['#type'] == 'view') {
    alkaline_preprocess_block_views($vars);
  }

  if ($vars['plugin_id'] == 'system_main_block') {
    // If this is a 404 block then wrap the system block content.
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'system.404') {
      // dpm($vars['content']);
      $vars['content']['#prefix'] = '<article><div class="body"><section><div class="text">';
      $vars['content']['#suffix'] = '</div></section></div></article>';
    }
  }

  if ($vars['plugin_id'] == 'page_title_block') {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'entity.node.canonical') {
      $vars['hidden'] = true;
    }
  }
}


/**
 * Preprocessor for alkaline_hero_banner block type
 */
function alkaline_preprocess_block_hero_banner(&$vars) {

  $uuid = $vars['derivative_plugin_id'];
  $block_content = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $uuid);
  if ($block_content) {
    // Fetch the background image URI.
    if ($block_content->field_image)
      $file = $block_content->field_image->entity;
    else if ($block_content->field_background_image)
      $file = $block_content->field_background_image->entity;

    if(isset($file)) {
      $uri = $file->getFileUri();
      $htmlId = $vars['attributes']['id'];

      // Add style element to vars.
      $vars['css'] = _alkaline_responsive_background_css('hero', "#$htmlId figure", $uri);
    }
  }
}


/**
 * Preprocessor for views blocks
 */
function alkaline_preprocess_block_views(&$vars) {
  $view = $vars['content']['#view'];

  // @todo Handle setting "use_more_always: false"
  $display = $view->getDisplay('default');
  if ($display->isMoreEnabled() && $display->usesLinkDisplay()) {
    $link_display_option = $display->getOption('link_display');

    if ($link_display_option == 'custom_url') {
      $title = $display->getOption('use_more_text');
      $url = $display->getOption('link_url');
    }
    // @todo Handle link provided by other view displays (e.g. page)

    // Prepare the link element.
    $vars['more_link'] = [
      '#type' => 'link',
      '#title' => $title,
      '#url' => Url::fromUserInput('/' . $url),
      '#attributes' => [
        'class' => 'button',
      ]
    ];
  }
}


/**
 * Implements template_preprocess_field()
 */
function alkaline_preprocess_field(&$vars) {
  // Call the type-specific preprocessor.
  $field_type_preprocessor = __FUNCTION__ . '_type_' . $vars['field_type'];
  if (function_exists($field_type_preprocessor)) {
    $field_type_preprocessor($vars);
  }

  // Call the name-specific preprocessor.
  $field_name_preprocessor = __FUNCTION__ . '_' . str_replace("field_", "" ,$vars['field_name']);
  if (function_exists($field_name_preprocessor)) {
    $field_name_preprocessor($vars);
  }

}


/**
 * Preprocessor for field_card
 */
function alkaline_preprocess_field_card(&$vars) {
  // Get the existing classes
  $classes = isset($vars['attributes']['class']) ? $vars['attributes']['class'] : [];

  // Get the number of cards.
  $item_count = count($vars['items']);

  // Set the grid classes based on the number of items.
  switch($item_count) {
    case 1: $grid_classes = ['grid', 'small-1']; break;
    case 2: $grid_classes = ['grid', 'small-1', 'medium-2']; break;
    case 3: $grid_classes = ['grid', 'small-1', 'medium-3']; break;
    default: $grid_classes = ['grid', 'small-2', 'medium-4'];
  }

  // Add the grid classes to the class array.
  $vars['attributes']['class'] = array_merge($classes, $grid_classes);
}


/**
 * Preprocessor for field_picture
 */
function alkaline_preprocess_field_picture(&$vars) {
  $field = $vars['element'];

  // Get the existing classes
  $classes = isset($vars['attributes']['class']) ? $vars['attributes']['class'] : [];

  // Get the number of cards.
  $item_count = count($vars['items']);

  if ($field['#bundle'] == 'gallery') {
    $grid_classes = ['grid', 'small-2', 'medium-4'];
  } else {
    // Set the grid classes based on the number of items.
    switch($item_count) {
      case 1: $grid_classes = ['grid', 'small-1']; break;
      case 2: $grid_classes = ['grid', 'small-1', 'medium-2']; break;
      case 3: $grid_classes = ['grid', 'small-1', 'medium-3']; break;
      default: $grid_classes = ['grid', 'small-2', 'medium-4'];
    }
  }

  // Add the grid classes to the class array.
  $vars['attributes']['class'] = array_merge($classes, $grid_classes);

}


/**
 * Implements template_preprocess_html()
 */
function alkaline_preprocess_html(&$vars) {
  // Get the favicon directory.
  global $base_url;
  $theme = \Drupal::service('theme.manager')->getActiveTheme();
  $vars['favicon_dir'] = $base_url.'/'. $theme->getPath() .'/images/favicon';

  // Get the SVG icons.
  $vars['icons'] = _alkaline_get_svg_icons([
    'fa-brands' => [
      'facebook-f',
      'twitter',
    ],
    'fa-solid' => [
      'arrow-down', 'arrow-left', 'arrow-right', 'arrow-up',
      'backward',
      'bars',
      'caret-down', 'caret-left', 'caret-right', 'caret-up',
      'chevron-down', 'chevron-left', 'chevron-right', 'chevron-up',
      'download',
      'ellipsis-h',
      'fast-backward',
      'fast-forward',
      'fax',
      'forward',
      'map-marker',
      'phone',
      'search', 'search-minus', 'search-plus',
      'shopping-cart',
      'times',
      'times-circle', // @todo Remove this icon
    ],
  ]);

  // Set a class based on the current route
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  $vars['attributes']['class'][] = $path_alias;

  // Add no-js class to prevent FOUC.
  $vars['attributes']['class'][] = "no-js";

  // Set a color for the theme_color metatag.
  $vars['theme_color'] = '#0a0a0a';
}


/**
 * Implements template_preprocess_node()
 */
function alkaline_preprocess_menu(&$vars, $hook) {
  if ($vars['menu_name'] != 'admin') {
    foreach ($vars['items'] as &$item) {
      try {
        $uri = $item['url']->getUri();

        // Add a phone icon if the link has a tel URI.
        if (explode(':', $uri)[0] == 'tel') {
          $item['icon'] = 'phone';
        }
      }
      catch (UnexpectedValueException $ex) {
        $route_name = $item['url']->getRouteName();
      }
    }
  }
}


/**
 * Implements template_preprocess_node()
 */
function alkaline_preprocess_node(&$vars) {
  // Change the submission date format
  $vars['date'] = \Drupal::service('date.formatter')
    ->format($vars['node']->getCreatedTime(), 'custom', 'j M Y');

  // Call the type-specific preprocessor.
  $node_type_preprocessor = __FUNCTION__ . '_' . $vars['node']->getType();
  if (function_exists($node_type_preprocessor)) {
    $node_type_preprocessor($vars);
  }
}


/**
 * Preprocessor for article content type
 */
function alkaline_preprocess_node_page(&$vars) {
  if ($vars['page'] && $vars['url'] == '/home') {
    // Remove the social share buttons if enabled
    if(isset($vars['content']['social_share_buttons']))
      unset($vars['content']['social_share_buttons']);
  }

  // Preprocess variables for lead section.
  if ($vars['view_mode'] == 'full') {
    _alkaline_lead_section($vars);
  }
}


/**
 * Implements template_preprocess_page()
 */
function alkaline_preprocess_page(&$vars) {
  $vars['site_name'] = \Drupal::config('system.site')->get('name');
  $vars['current_year'] = date('Y');
}


/**
 * Implements template_preprocess_page()
 */
function alkaline_preprocess_paragraph(&$vars) {
  $paragraph = $vars['elements']['#paragraph'];

  // Call the type-specific preprocessor.
  $paragraph_type_preprocessor = __FUNCTION__ . '_' . $paragraph->getType();
  if (function_exists($paragraph_type_preprocessor)) {
    $paragraph_type_preprocessor($vars);
  }
}


/**
 * Implements hook_theme_suggestions_block_alter()
 */
function alkaline_theme_suggestions_block_alter(&$suggestions, $vars) {

  // Add template suggestions for custom block types.
  if ($vars['elements']['#base_plugin_id'] == 'block_content') {

    // Get the block type from the database.
    $uuid = $vars['elements']['#derivative_plugin_id'];
    $block_type = \Drupal::database()
    ->select('block_content','bc')
    ->fields('bc', ['type'])
    ->condition('uuid', $uuid)
    ->execute()
    ->fetchField();

    // Add a template suggestion for the block type.
    $suggestions[] = 'block__' . $block_type;
  }
}


/**
 * Implements hook_theme_suggestions_field_alter()
 */
function alkaline_theme_suggestions_field_alter(&$suggestions, $vars) {
  $field = $vars['element'];

  // Add template suggestions based on view mode.
  $view_mode = $field['#view_mode'];
  $suggestions[] = 'field__' . $field['#field_name'] . '__' . $view_mode;
  $suggestions[] = 'field__' . $field['#field_type'] . '__' . $view_mode;
}


/**
 * Implements hook_theme_suggestions_page_alter() to set 4xx template suggestions.
 */
function alkaline_theme_suggestions_page_alter(array &$suggestions, array $vars) {
  // get the route
  $route_name = \Drupal::routeMatch()->getRouteName();
  $route_parts = explode('.', $route_name);

  // is it system.4xx ?
  if (count($route_parts) == 2 && $route_parts[0] === 'system') {
    $code = $route_parts[1];
    if (is_numeric($code) && $code >= 400 and $code < 500) {
      // suggest template page--4xx.html.twig (e.g., page--404.html.twig)
      $suggestions[] = 'page__' . $route_parts[1];
    }
  }
}


/**
 * Implements hook_theme_suggestions_user_alter()
 */
function alkaline_theme_suggestions_user_alter(&$suggestions, $vars) {
  // add view mode template suggestion
  $suggestions[] = 'user__' . $vars['elements']['#view_mode'];
}

