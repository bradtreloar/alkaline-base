

$menu-button-icon-size: 1.5em;
$menu-items-padding: 0.7rem 1.0rem;

$header-menu-button-font-size: 0.875em;

$drilldown-background: inherit;
$drilldown-submenu-background: inherit;

$dropdownmenu-min-width: 200px;
$dropdownmenu-padding: $menu-items-padding;
$dropdownmenu-submenu-padding: $dropdownmenu-padding;

$share-menu-button-size: 2em;


////////////////////////////////////////////////////////////////////////////////
/// Helpers
////////////////////////////////////////////////////////////////////////////////


/// Align menu items.
@mixin menu-align($alignment) {
  @if $alignment == left {
    justify-content: flex-start;
  }
  @else if $alignment == right {
    li {
      display: flex;
      justify-content: flex-end;

      .submenu li {
        justify-content: flex-start;
      }
    }

    &.vertical li {
      display: block;
      text-align: $global-right;

      .submenu li {
        text-align: $global-right;
      }
    }
  }
  @else if $alignment == center {
    li {
      display: flex;
      justify-content: center;

      .submenu li {
        justify-content: flex-start;
      }
    }
  }
}

/// Sets the direction of a Menu.
/// @param {Keyword} $dir [horizontal] - Direction of the Menu. Can be `horizontal` or `vertical`.
@mixin menu-direction($dir: horizontal) {
  @if $dir == horizontal {
    flex-wrap: wrap;
    flex-direction: row;
  }
  @else if $dir == vertical {
    flex-wrap: nowrap;
    flex-direction: column;
  }
  @else {
    @warn 'The direction used for menu-direction() must be horizontal or vertical.';
  }
}

@mixin menu-button {
  align-items: center;
  display: flex;
  height: 100%;
  line-height: 1;
  margin-bottom: 0;
  padding: $menu-items-padding;
  text-decoration: none;

  svg.icon {
    display: block;
    height: $menu-button-icon-size;
    width: $menu-button-icon-size;

    & + span {
      display: inline-block;
      margin-left: 0.5em;
    }
  }

  span {
    display: block;
    line-height: $menu-button-icon-size;
  }

  .layer.topbar & {
    font-size: 0.875em;

    // If the menu item has an icon then hide the
    // text labal until there is ample horizontal space.
    svg.icon + span {
      @include breakpoint(small only) {
        display: none;
      }
    }
  }
}


@mixin dropdown-menu-direction($dir: horizontal) {
  @if $dir == horizontal {
    > li.opens-left {
      > .is-dropdown-submenu {
        top: 100%;
        right: 0;
        left: auto;
      }
    }

    > li.opens-right {
      > .is-dropdown-submenu {
        top: 100%;
        right: auto;
        left: 0;
      }
    }
  }
  @else if $dir == vertical {
    > li {
      .is-dropdown-submenu {
        top: 0;
      }

      &.opens-left {
        > .is-dropdown-submenu {
          right: 100%;
          left: auto;
          top: 0;
        }
      }

      &.opens-right {
        > .is-dropdown-submenu {
          right: auto;
          left: 100%;
        }
      }
    }
  }
  @else {
    @warn 'The direction used for dropdown-menu-direction() must be horizontal or vertical.';
  }
}


////////////////////////////////////////////////////////////////////////////////
/// Components
////////////////////////////////////////////////////////////////////////////////


@mixin alkaline-menu {
  ul.menu {
    padding: 0;
    margin: 0;
    list-style: none;
    position: relative;
    display: flex;
    flex-wrap: wrap;

    .layer.topbar & {
      height: 100%;

      // Prevent FOUC on responsive menu
      &:not(.drilldown):not(.dropdown) {
        ul {
          display: none;
        }
      }
    }

    .region.navbar & {
      @include breakpoint(medium down) {
        @include menu-direction(vertical);
        height: auto;
      }
    }

    .region.footer & {
      @include menu-direction(vertical);

      a {
        padding-left: 0;
        padding-right: 0;
      }
    }

    // Default orientation: horizontal
    &, &.horizontal {
      @include menu-direction(horizontal);
    }

    // Vertical orientation modifier
    &.vertical {
      @include menu-direction(vertical);
    }

    // Breakpoint specific versions
    @include -zf-each-breakpoint($small: false) {
      &.#{$-zf-size}-horizontal {
        @include menu-direction(horizontal);
      }

      &.#{$-zf-size}-vertical {
        @include menu-direction(vertical);
      }
    }

    // Align left
    &.align-#{$global-left} {
      @include menu-align(left);
    }

    // Align right
    &.align-#{$global-right} {
      @include menu-align(right);
    }

    // Align center
    &.align-center {
      @include menu-align(center);
    }

    li {
      @include disable-mouse-outline;
    }

    a {
      @include menu-button;
    }
  }

  // Prevent FOUC when using the Responsive Menu plugin
  .no-js [data-responsive-menu] ul {
    display: none;
  }
}


@mixin alkaline-share-menu {
  ul.menu.social-share {
    @include button-group(li, 0.5rem);

    a {
      height: $share-menu-button-size;
      width: $share-menu-button-size;
      padding: 20%;

      svg.icon {
        height: 100%;
        width: 100%;

        & + span {
          display: none;
        }
      }
    }
  }
}


@mixin alkaline-drilldown-menu {
  @include foundation-drilldown-menu;
}


@mixin alkaline-dropdown-menu {
  ul.menu.dropdown {
    @include dropdown-menu-direction(horizontal);

    a {
      @include disable-mouse-outline;
      padding: $dropdownmenu-padding;
    }

    .no-js & ul {
      display: none;
    }

    &.vertical {
      @include dropdown-menu-direction(vertical);
    }

    @each $size in $breakpoint-classes {
      @if $size != $-zf-zero-breakpoint {
        @include breakpoint($size) {
          &.#{$size}-horizontal {
            @include dropdown-menu-direction(horizontal);
          }

          &.#{$size}-vertical {
            @include dropdown-menu-direction(vertical);
          }
        }
      }
    }

    &.align-right {
      .is-dropdown-submenu.first-sub {
        top: 100%;
        right: 0;
        left: auto;
      }
    }
  }

  .is-dropdown-menu.vertical {
    width: 100px;

    &.align-right {
      float: right;
    }
  }

  .is-dropdown-submenu-parent {
    position: relative;

    a::after {
      position: absolute;
      top: 50%;
      #{$global-right}: 5px;
      #{$global-left}: auto;
      margin-top: -1 * $dropdownmenu-arrow-size;
    }

    &.opens-inner > .is-dropdown-submenu {

      top: 100%;
      @if $global-text-direction == 'rtl' {
        right: auto;
      }
      @else {
        left: auto;
      }
    }

    &.opens-left > .is-dropdown-submenu {
      right: 100%;
      left: auto;
    }

    &.opens-right > .is-dropdown-submenu {
      right: auto;
      left: 100%;
    }
  }

  .is-dropdown-submenu {
    position: absolute;
    top: 0;
    #{$global-left}: 100%;
    z-index: 1;

    display: none;
    min-width: $dropdownmenu-min-width;

    .dropdown & a {
      padding: $dropdownmenu-submenu-padding;
    }

    > li {
      width: 100%;
    }

    // TODO Cut back specificity
    //&:not(.js-dropdown-nohover) > .is-dropdown-submenu-parent:hover > &, // why is this line needed? Opening is handled by JS and this causes some ugly flickering when the sub is re-positioned automatically...
    &.js-dropdown-active {
      display: block;
    }
  }
}

@mixin alkaline-navbar-toggle-button {
  button[data-toggle="navbar"] {
    @include menu-button;
    height: 100%;
    line-height: 1;
    text-decoration: none;
    display: block;
    padding: $menu-items-padding;
    cursor: pointer;

    @include breakpoint(large) {
      display: none;
    }
  }
}


// @include alkaline-menu;
// @include alkaline-drilldown-menu;
// @include alkaline-dropdown-menu;
// @include alkaline-navbar-toggle-button;
// @include alkaline-share-menu;
